service: projects-tracking
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  runtimeManagement: auto
  region: us-east-2
  stage: dev
  timeout: 30

custom:
  serverless-offline:
    ignoreJWTSignature: true

functions:
  authorize:
    handler: authorizer/authorize.handler

  # Auth routes
  login:
    handler: auth/controller/auth.login
    events:
      - http:
          path: /login
          method: post
          cors: true

  forgotPassword:
    handler: auth/controller/auth.forgotPassword
    events:
      - http:
          path: /forgotPassword
          method: post
          cors: true

  resetPassword:
    handler: auth/controller/auth.resetPassword
    events:
      - http:
          path: /resetPassword/{token}
          method: post
          cors: true

  # Category Routes
  categoriesPostApi:
    handler: modules/categories/controller/categoryIndex.post
    events:
      - http:
          path: /categories
          method: post
          authorizer:
                name: authorize
                type: request
                identitySource: method.request.header.Authorization
          cors: true

  categoriesPatchApi:
    handler: modules/categories/controller/categoryIndex.patch
    events:
      - http:
          path: /category/{id}
          method: patch
          authorizer:
                name: authorize
                type: request
                identitySource: method.request.header.Authorization
          cors: true

  categoriesProrityPatchApi:
    handler: modules/categories/controller/categoryIndex.priorityPatch
    events:
      - http:
          path: /category/priority
          method: patch
          authorizer:
                name: authorize
                type: request
                identitySource: method.request.header.Authorization
          cors: true

  categoriesDeleteApi:
    handler: modules/categories/controller/categoryIndex.deleteReq
    events:
      - http:
          path: /category/{id}
          method: delete
          authorizer:
                name: authorize
                type: request
                identitySource: method.request.header.Authorization
          cors: true

  # Project Category Routes
  projectsCategoriesPostApi:
    handler: modules/projects_categories/controller/projectCategoryIndex.post
    events:
      - http:
          path: /project/categories
          method: post
          authorizer:
                name: authorize
                type: request
                identitySource: method.request.header.Authorization
          cors: true

  projectsCategoriesPatchApi:
    handler: modules/projects_categories/controller/projectCategoryIndex.patch
    events:
      - http:
          path: /project/category/{id}
          method: patch
          authorizer:
                name: authorize
                type: request
                identitySource: method.request.header.Authorization
          cors: true

  projectsCategoriesPriorityPatchApi:
    handler: modules/projects_categories/controller/projectCategoryIndex.priorityPatch
    events:
      - http:
          path: /project/category/priority
          method: patch
          authorizer:
                name: authorize
                type: request
                identitySource: method.request.header.Authorization
          cors: true

  projectsCategoriesDeleteApi:
    handler: modules/projects_categories/controller/projectCategoryIndex.deleteReq
    events:
      - http:
          path: /project/category
          method: delete
          authorizer:
                name: authorize
                type: request
                identitySource: method.request.header.Authorization
          cors: true

  # Project Task Routes
  projectsTasksPostApi:
    handler: modules/projects_tasks/controller/projectTaskIndex.post
    events:
      - http:
          path: /project/tasks
          method: post
          authorizer:
                name: authorize
                type: request
                identitySource: method.request.header.Authorization
          cors: true

  projectsTasksPatchByIdApi:
    handler: modules/projects_tasks/controller/projectTaskIndex.patchById
    events:
      - http:
          path: /project/task/{id}
          method: patch
          authorizer:
                name: authorize
                type: request
                identitySource: method.request.header.Authorization
          cors: true

  projectsTasksPatchApi:
    handler: modules/projects_tasks/controller/projectTaskIndex.patch
    events:
      - http:
          path: /project/tasks
          method: patch
          authorizer:
                name: authorize
                type: request
                identitySource: method.request.header.Authorization
          cors: true

  projectsTasksPriorityPatchApi:
    handler: modules/projects_tasks/controller/projectTaskIndex.priorityPatch
    events:
      - http:
          path: /project/task/priority
          method: patch
          authorizer:
                name: authorize
                type: request
                identitySource: method.request.header.Authorization
          cors: true

  projectsTasksDeleteApi:
    handler: modules/projects_tasks/controller/projectTaskIndex.deleteReq
    events:
      - http:
          path: /project/tasks
          method: delete
          authorizer:
                name: authorize
                type: request
                identitySource: method.request.header.Authorization
          cors: true

  # Project Template Routes
  projectsTemplatesGetApi:
    handler: modules/projects_templates/controller/projectTemplateIndex.get
    events:
      - http:
          path: /projects
          method: get
          authorizer:
                name: authorize
                type: request
                identitySource: method.request.header.Authorization
          cors: true

  projectsTemplatesGetByIdApi:
    handler: modules/projects_templates/controller/projectTemplateIndex.getById
    events:
      - http:
          path: /project/{id}
          method: get
          authorizer:
                name: authorize
                type: request
                identitySource: method.request.header.Authorization
          cors: true

  projectsTemplatesPostApi:
    handler: modules/projects_templates/controller/projectTemplateIndex.post
    events:
      - http:
          path: /projects
          method: post
          authorizer:
                name: authorize
                type: request
                identitySource: method.request.header.Authorization
          cors: true

  projectsPatchApi:
    handler: modules/projects_templates/controller/projectTemplateIndex.projectPatch
    events:
      - http:
          path: /project/{id}
          method: patch
          authorizer:
                name: authorize
                type: request
                identitySource: method.request.header.Authorization
          cors: true

  projectsTemplatesPatchApi:
    handler: modules/projects_templates/controller/projectTemplateIndex.patch
    events:
      - http:
          path: /project/template/{id}
          method: patch
          authorizer:
                name: authorize
                type: request
                identitySource: method.request.header.Authorization
          cors: true

  # Role Routes
  rolesGetApi:
    handler: modules/roles/controller/roleIndex.get
    events:
      - http:
          path: /roles
          method: get
          authorizer:
                name: authorize
                type: request
                identitySource: method.request.header.Authorization
          cors: true

  rolesGetByIdApi:
    handler: modules/roles/controller/roleIndex.getById
    events:
      - http:
          path: /role/{id}
          method: get
          authorizer:
                name: authorize
                type: request
                identitySource: method.request.header.Authorization
          cors: true

  rolesPostApi:
    handler: modules/roles/controller/roleIndex.post
    events:
      - http:
          path: /role
          method: post
          authorizer:
                name: authorize
                type: request
                identitySource: method.request.header.Authorization
          cors: true

  rolesPatchApi:
    handler: modules/roles/controller/roleIndex.patch
    events:
      - http:
          path: /role/{id}
          method: patch
          authorizer:
                name: authorize
                type: request
                identitySource: method.request.header.Authorization
          cors: true

  rolesDeleteApi:
    handler: modules/roles/controller/roleIndex.deleteReq
    events:
      - http:
          path: /role/{id}
          method: delete
          authorizer:
                name: authorize
                type: request
                identitySource: method.request.header.Authorization
          cors: true

  # Task Routes
  tasksPostApi:
    handler: modules/tasks/controller/taskIndex.post
    events:
      - http:
          path: /tasks
          method: post
          authorizer:
                name: authorize
                type: request
                identitySource: method.request.header.Authorization
          cors: true

  tasksPatchApi:
    handler: modules/tasks/controller/taskIndex.patch
    events:
      - http:
          path: /tasks
          method: patch
          authorizer:
                name: authorize
                type: request
                identitySource: method.request.header.Authorization
          cors: true

  tasksPriorityPatchApi:
    handler: modules/tasks/controller/taskIndex.priorityPatch
    events:
      - http:
          path: /task/priority
          method: patch
          authorizer:
                name: authorize
                type: request
                identitySource: method.request.header.Authorization
          cors: true

  tasksDeleteApi:
    handler: modules/tasks/controller/taskIndex.deleteReq
    events:
      - http:
          path: /tasks
          method: delete
          authorizer:
                name: authorize
                type: request
                identitySource: method.request.header.Authorization
          cors: true

  # Template Routes
  templatesGetApi:
    handler: modules/templates/controller/templateIndex.get
    events:
      - http:
          path: /templates
          method: get
          authorizer:
                name: authorize
                type: request
                identitySource: method.request.header.Authorization
          cors: true

  templatesGetByIdApi:
    handler: modules/templates/controller/templateIndex.getById
    events:
      - http:
          path: /template/{id}
          method: get
          authorizer:
                name: authorize
                type: request
                identitySource: method.request.header.Authorization
          cors: true

  templatesPostApi:
    handler: modules/templates/controller/templateIndex.post
    events:
      - http:
          path: /template
          method: post
          authorizer:
                name: authorize
                type: request
                identitySource: method.request.header.Authorization
          cors: true

  templatesPatchApi:
    handler: modules/templates/controller/templateIndex.patch
    events:
      - http:
          path: /template/{id}
          method: patch
          authorizer:
                name: authorize
                type: request
                identitySource: method.request.header.Authorization
          cors: true

  templatesDeleteApi:
    handler: modules/templates/controller/templateIndex.deleteReq
    events:
      - http:
          path: /template/{id}
          method: delete
          authorizer:
                name: authorize
                type: request
                identitySource: method.request.header.Authorization
          cors: true

  # User Routes
  getAllUsers:
    handler: modules/users/controller/usersIndex.get
    events:
      - http:
          path: /users
          method: get
          cors: true
          authorizer:
                name: authorize
                type: request
                identitySource: method.request.header.Authorization

  getUserById:
    handler: modules/users/controller/usersIndex.getById
    events:
      - http:
          path: /user/{id}
          method: get
          cors: true
          authorizer:
                name: authorize
                type: request
                identitySource: method.request.header.Authorization

  postUsers:
    handler: modules/users/controller/usersIndex.post
    events:
      - http:
          path: /user
          method: post
          cors: true

  updateUsers:
    handler: modules/users/controller/usersIndex.patch
    events:
      - http:
          path: /user/{id}
          method: patch
          cors: true
          authorizer:
                name: authorize
                type: request
                identitySource: method.request.header.Authorization

  uploadUserProfile:
    handler: modules/users/controller/usersIndex.imageUpload
    events:
      - http:
          path: /user/profile/{id}
          method: post
          cors: true
          authorizer:
                name: authorize
                type: request
                identitySource: method.request.header.Authorization

  updateUsersRoles:
    handler: modules/users/controller/usersIndex.userRolePatch
    events:
      - http:
          path: /users/roles
          method: patch
          cors: true
          authorizer:
                name: authorize
                type: request
                identitySource: method.request.header.Authorization

  DeleteUsers:
    handler: modules/users/controller/usersIndex.Delete
    events:
      - http:
          path: /user/{id}
          method: delete
          cors: true
          authorizer:
                name: authorize
                type: request
                identitySource: method.request.header.Authorization

  deleteUserProfile:
    handler: modules/users/controller/usersIndex.deleteReq
    events:
      - http:
          path: /user/profile/{id}
          method: delete
          cors: true
          authorizer:
                name: authorize
                type: request
                identitySource: method.request.header.Authorization

plugins:
  - serverless-offline
